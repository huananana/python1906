# 所有的位运算都是针对数字的补码进行操作的；特点是：快（效率高）
# 位运算： &（），| ~ ^ << >>

# 1.&
"""
运算规则：补码每一位上的数都是1结果就是1 ，如果有一个0结果就是0
1110 & 0111 = 0110
应用：高效判断数字的奇偶性
-让数字和1进行按位与运算
"""

# import
num = 1
if num & 1 == 1:
    print("奇数")
else:
    print('偶数')

# 2.|
"""
运算规则：每一位上的数如果都是0结果就是0，只要有1结果就是1
1110 | 0111 -> 1111
"""

# 3.~
"""
运算规则：将每一位上的0变成1，1变成0
~ 1101 -> 0010
"""

# 4.^
"""
运算规则：每一位上的数相同位0，不同位1
11011 ^ 10010 -> 01001
"""

# 5. <<
"""
数字 << N ->指定的数字的补码整体向左移动N位;
**计算：数字*2**N
"""

# 6. >>
"""
数字 >> N -> 指定的数字补码整体向右移动N位
**计算：数字//2 **N
**9//2 = 4  <==> -9//2 = -5
"""

print(bin(13 & 12))
print(0b10111, 0x17)
